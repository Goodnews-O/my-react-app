{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","_useState","useState","_useState2","Object","slicedToArray","list","setlist","_useState3","_useState4","input","setinput","react_default","a","createElement","type","value","onChange","e","target","onClick","todo","newTodo","id","Math","random","concat","toConsumableArray","addToDo","map","key","newlist","filter","deleteTodo","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_App"],"mappings":"+KA+CeA,MA7Cf,WAAe,IAAAC,EACWC,mBAAS,IAAGC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAA7BK,EAAIH,EAAA,GAAEI,EAAOJ,EAAA,GAAAK,EACMN,mBAAS,IAAGO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAA/BE,EAAKD,EAAA,GAAEE,EAAQF,EAAA,GAsBtB,OACEG,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAI,cACJF,EAAAC,EAAAC,cAAA,SACEC,KAAK,OACLC,MAAON,EACPO,SAAU,SAACC,GAAC,OAAKP,EAASO,EAAEC,OAAOH,UAErCJ,EAAAC,EAAAC,cAAA,UAAQM,QAAS,kBA5BL,SAACC,GACf,IAAMC,EAAU,CACdC,GAAIC,KAAKC,SACTJ,KAAMA,GAIRd,EAAO,GAAAmB,OAAAtB,OAAAuB,EAAA,EAAAvB,CAAKE,GAAI,CAAEgB,KAGlBX,EAAS,IAkBgBiB,CAAQlB,KAAQ,OACvCE,EAAAC,EAAAC,cAAA,UACGR,EAAKuB,IAAI,SAACR,GAAI,OACbT,EAAAC,EAAAC,cAAA,MAAIgB,IAAKT,EAAKE,IACXF,EAAKA,KACNT,EAAAC,EAAAC,cAAA,UAAQM,QAAS,kBApBR,SAACG,GAElB,IAAMQ,EAAUzB,EAAK0B,OAAO,SAACX,GAAI,OAAKA,EAAKE,KAAOA,IAElDhB,EAAQwB,GAgBuBE,CAAWZ,EAAKE,MAAK,cC3BzCW,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxCC,EAAAnB,EAAA,GAAAoB,KAAAD,EAAAE,KAAA,UAAqBD,KAAK,SAAAE,GAAiD,IAA9CC,EAAMD,EAANC,OAAQC,EAAMF,EAANE,OAAQC,EAAMH,EAANG,OAAQC,EAAMJ,EAANI,OAAQC,EAAOL,EAAPK,QAC3DJ,EAAON,GACPO,EAAOP,GACPQ,EAAOR,GACPS,EAAOT,GACPU,EAAQV,MCDDW,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACHtC,EAAAC,EAAAC,cAACF,EAAAC,EAAMsC,WAAU,KACfvC,EAAAC,EAAAC,cAACsC,EAAG,QAORlB","file":"static/js/main.ed23020c.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nfunction App() {\n  const [list, setlist] = useState([]);\n  const [input, setinput] = useState(\"\");\n\n  const addToDo = (todo) => {\n    const newTodo = {\n      id: Math.random(),\n      todo: todo,\n    };\n\n    // add the todo to the list\n    setlist([...list, newTodo]);\n\n    // clear input box\n    setinput(\"\");\n  };\n\n  const deleteTodo = (id) => {\n    // filter out todo with id\n    const newlist = list.filter((todo) => todo.id !== id);\n\n    setlist(newlist);\n  };\n\n  return (\n    <div>\n      <h1>To-Do List</h1>\n      <input\n        type=\"text\"\n        value={input}\n        onChange={(e) => setinput(e.target.value)}\n      />\n      <button onClick={() => addToDo(input)}>Add</button>\n      <ul>\n        {list.map((todo) => (\n          <li key={todo.id}>\n            {todo.todo}\n            <button onClick={() => deleteTodo(todo.id)}>&times;</button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}